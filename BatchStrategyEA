//+------------------------------------------------------------------+
//| 批次交易示例 EA                                                  |
//| 根据用户指定逻辑实现：                                           |
//|  - 每批次最多下 5 单，資金為賬戶 90% 均分                        |
//|  - 浮盈達 +2% 全平並暫停 24 小時                                  |
//|  - 浮虧達 -2% 全平，冷卻 5 分鐘後重新開始                         |
//|  - 重要狀態寫入全局變量，EA 重啟後可繼續                           |
//+------------------------------------------------------------------+
#property copyright "ChatGPT"
#property version   "1.00"
#property strict

#include <Trade/Trade.mqh>
CTrade trade;

//--- 參數
input int      MagicNumber   = 123456;       // 訂單識別碼
input double   ProfitTarget  = 2.0;          // 批次止盈百分比
input double   LossLimit     = 2.0;          // 批次止損百分比
input int      MaxOrders     = 5;            // 批次最多下單數
input int      MACD_Fast     = 12;           // MACD 快線周期
input int      MACD_Slow     = 26;           // MACD 慢線周期
input int      MACD_Signal   = 9;            // MACD 信號線周期
input int      MadridOffset  = 1;            // 馬德里時差(夏令時用 2)

//--- 全局狀態變量
double   batchStartBalance = 0;      // 批次啟動時賬戶餘額
datetime dayStartTime      = 0;      // 當天起點時間
bool     dailyStopped      = false;  // 當日是否已停止
int      iterationCount    = 0;      // 已下單次數
datetime cooldownStart     = 0;      // 冷卻開始時間(0 表示無)

int      handleMACD        = INVALID_HANDLE; // MACD 句柄(當前周期)
int      handleMACD_HTF    = INVALID_HANDLE; // 大周期 MACD
int      handleRSI         = INVALID_HANDLE; // RSI 句柄
int      handleBands       = INVALID_HANDLE; // 布林帶句柄
int      handleATR         = INVALID_HANDLE; // ATR 句柄

//--- 全局變量名稱
#define GV_BALANCE      "BatchEA_Balance"
#define GV_DAYSTART     "BatchEA_DayStart"
#define GV_DAILYSTOP    "BatchEA_DailyStop"
#define GV_ITER         "BatchEA_Iter"
#define GV_COOLDOWN     "BatchEA_Cooldown"

//+------------------------------------------------------------------+
//| 讀取保存的全局變量                                               |
//+------------------------------------------------------------------+
void LoadGlobals()
  {
   if(GlobalVariableCheck(GV_BALANCE))   batchStartBalance = GlobalVariableGet(GV_BALANCE);
   if(GlobalVariableCheck(GV_DAYSTART))  dayStartTime      = (datetime)GlobalVariableGet(GV_DAYSTART);
   if(GlobalVariableCheck(GV_DAILYSTOP)) dailyStopped      = (GlobalVariableGet(GV_DAILYSTOP)>0.5);
   if(GlobalVariableCheck(GV_ITER))      iterationCount    = (int)GlobalVariableGet(GV_ITER);
   if(GlobalVariableCheck(GV_COOLDOWN))  cooldownStart     = (datetime)GlobalVariableGet(GV_COOLDOWN);
  }
//+------------------------------------------------------------------+
//| 保存當前狀態到全局變量                                           |
//+------------------------------------------------------------------+
void SaveGlobals()
  {
   GlobalVariableSet(GV_BALANCE,batchStartBalance);
   GlobalVariableSet(GV_DAYSTART,dayStartTime);
   GlobalVariableSet(GV_DAILYSTOP,dailyStopped?1:0);
   GlobalVariableSet(GV_ITER,iterationCount);
   GlobalVariableSet(GV_COOLDOWN,cooldownStart);
  }
//+------------------------------------------------------------------+
//| 取得馬德里時間                                                   |
//+------------------------------------------------------------------+
datetime MadridTime()
  {
   return(TimeGMT()+MadridOffset*3600);
  }
//+------------------------------------------------------------------+
//| 開啟 1 分鐘定時器                                                |
//+------------------------------------------------------------------+
void StartMinuteTimer()
  {
   EventKillTimer();
   EventSetTimer(60); // 每分鐘
  }
//+------------------------------------------------------------------+
//| 開啟 5 分鐘冷卻定時器                                            |
//+------------------------------------------------------------------+
void StartCooldownTimer()
  {
   EventKillTimer();
   EventSetTimer(300); // 冷卻 5 分鐘
  }
//+------------------------------------------------------------------+
//| 重新啟動新批次                                                  |
//+------------------------------------------------------------------+
void StartNewBatch()
  {
   batchStartBalance = AccountInfoDouble(ACCOUNT_BALANCE);
   iterationCount    = 0;
   cooldownStart     = 0;
   if(dayStartTime==0)
      dayStartTime = MadridTime();
   SaveGlobals();
   StartMinuteTimer();
  }
//+------------------------------------------------------------------+
//| EA 初始化                                                        |
//+------------------------------------------------------------------+
int OnInit()
  {
   LoadGlobals();
   // 過期 24 小時則重置日狀態
   datetime now=MadridTime();
   if(dayStartTime>0 && now-dayStartTime>=24*3600)
     {
      dayStartTime=0;
      dailyStopped=false;
      iterationCount=0;
      cooldownStart=0;
     }
   if(handleMACD==INVALID_HANDLE)
      handleMACD=iMACD(_Symbol,_Period,MACD_Fast,MACD_Slow,MACD_Signal,PRICE_CLOSE);
   if(handleMACD_HTF==INVALID_HANDLE)
      handleMACD_HTF=iMACD(_Symbol,PERIOD_H1,MACD_Fast,MACD_Slow,MACD_Signal,PRICE_CLOSE);
   if(handleRSI==INVALID_HANDLE)
      handleRSI=iRSI(_Symbol,_Period,14,PRICE_CLOSE);
   if(handleBands==INVALID_HANDLE)
      handleBands=iBands(_Symbol,_Period,20,2.0,0,PRICE_CLOSE);
   if(handleATR==INVALID_HANDLE)
      handleATR=iATR(_Symbol,_Period,14);

   if(cooldownStart>0) // 上次在冷卻中
     {
      if(now>=cooldownStart+300)
         StartNewBatch();
      else
         StartCooldownTimer();
     }
   else if(!dailyStopped)
     {
      if(iterationCount==0)
         batchStartBalance=AccountInfoDouble(ACCOUNT_BALANCE);
      StartMinuteTimer();
     }
   SaveGlobals();
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| 去初始化                                                         |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   SaveGlobals();
  EventKillTimer();
  if(handleMACD!=INVALID_HANDLE)
     IndicatorRelease(handleMACD);
   if(handleMACD_HTF!=INVALID_HANDLE)
      IndicatorRelease(handleMACD_HTF);
   if(handleRSI!=INVALID_HANDLE)
      IndicatorRelease(handleRSI);
   if(handleBands!=INVALID_HANDLE)
      IndicatorRelease(handleBands);
   if(handleATR!=INVALID_HANDLE)
      IndicatorRelease(handleATR);
  }
//+------------------------------------------------------------------+
//| Tick 事件：用於在停止後檢查 24 小時是否已過                       |
//+------------------------------------------------------------------+
void OnTick()
  {
   if(dailyStopped && dayStartTime>0 && MadridTime()>=dayStartTime+24*3600)
     {
      dayStartTime=0;
      dailyStopped=false;
      iterationCount=0;
      StartNewBatch();
     }
  }
//+------------------------------------------------------------------+
//| 定時器事件                                                       |
//+------------------------------------------------------------------+
void OnTimer()
  {
   if(cooldownStart>0) // 冷卻結束，啟動新批次
     {
      StartNewBatch();
      return;
     }
   MinuteLogic();
  }
//+------------------------------------------------------------------+
//| 每分鐘執行的核心邏輯                                             |
//+------------------------------------------------------------------+
void MinuteLogic()
  {
   datetime now=MadridTime();
   // -- 24 小時週期檢查 --
   if(dayStartTime==0)
     {
      dayStartTime=now;
      SaveGlobals();
     }
   else if(now-dayStartTime>=24*3600)
     {
      dayStartTime=now;
      dailyStopped=false;
      iterationCount=0;
      SaveGlobals();
     }
   if(dailyStopped && now<dayStartTime+24*3600)
      return;

   // -- 計算當前浮動盈虧 --
  double curProfit=0;
  for(int i=PositionsTotal()-1;i>=0;i--)
    {
     ulong ticket=PositionGetTicket(i);
     if(PositionSelectByTicket(ticket))
       {
        if(PositionGetInteger(POSITION_MAGIC)==MagicNumber)
           curProfit+=PositionGetDouble(POSITION_PROFIT);
       }
    }

   UpdateTrailing();

   // -- 止盈判定 --
   if(curProfit>=batchStartBalance*ProfitTarget/100.0)
     {
      CloseAllPositions();
      dailyStopped=true;
      SaveGlobals();
      EventKillTimer();
      return;
     }
   // -- 止損判定 --
   if(curProfit<=-batchStartBalance*LossLimit/100.0)
     {
      CloseAllPositions();
      cooldownStart=MadridTime();
      SaveGlobals();
      StartCooldownTimer();
      return;
     }

   // -- 嘗試開新倉 --
   if(!dailyStopped && iterationCount<MaxOrders)
     {
      int openCount=OpenPositionCount();
      if(openCount<MaxOrders)
        {
         int signal=GetSignal();
         if(signal!=0)
           {
            double volume=CalcLot(signal);
            if(volume>0)
              {
               if(PlaceOrder(signal,volume))
                 {
                  iterationCount++;
                  SaveGlobals();
                 }
              }
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| 判斷 MACD 金叉死叉信號                                           |
//+------------------------------------------------------------------+
int GetSignal()
  {
   double macd[2],signal[2];
   if(CopyBuffer(handleMACD,0,0,2,macd)<2) return 0;
   if(CopyBuffer(handleMACD,1,0,2,signal)<2) return 0;
   int trend=GetTrend();
   double rsi[1];
   double band_mid[1];
   if(CopyBuffer(handleRSI,0,0,1,rsi)<1) return 0;
   if(CopyBuffer(handleBands,1,0,1,band_mid)<1) return 0; // index 1=middle

   double price=SymbolInfoDouble(_Symbol,SYMBOL_BID);

   if(macd[1]<signal[1] && macd[0]>signal[0])
     {
      if(trend>=0 && rsi[0]>50 && price>band_mid[0])
         return 1;  // 多頭
     }
   if(macd[1]>signal[1] && macd[0]<signal[0])
     {
      if(trend<=0 && rsi[0]<50 && price<band_mid[0])
         return -1; // 空頭
     }
   return 0;
  }

//+------------------------------------------------------------------+
//| 大周期趨勢判斷                                                   |
//+------------------------------------------------------------------+
int GetTrend()
  {
   double macd[1],sig[1];
   if(CopyBuffer(handleMACD_HTF,0,0,1,macd)<1) return 0;
   if(CopyBuffer(handleMACD_HTF,1,0,1,sig)<1) return 0;
   if(macd[0]>sig[0]) return 1;
   if(macd[0]<sig[0]) return -1;
   return 0;
  }
//+------------------------------------------------------------------+
//| 計算單筆下單手數                                                 |
//+------------------------------------------------------------------+
double CalcLot(int direction)
  {
   double price=(direction>0)?SymbolInfoDouble(_Symbol,SYMBOL_ASK):SymbolInfoDouble(_Symbol,SYMBOL_BID);
   double margin;
   if(!OrderCalcMargin(direction>0?ORDER_TYPE_BUY:ORDER_TYPE_SELL,_Symbol,1.0,price,margin))
      return 0;
   double volume=(batchStartBalance*0.9/5.0)/margin;
   double step = SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_STEP);
   double min  = SymbolInfoDouble(_Symbol,SYMBOL_VOLUME_MIN);
   volume=MathFloor(volume/step)*step;
   if(volume<min) volume=min;
   return volume;
  }
//+------------------------------------------------------------------+
//| 發送市價訂單                                                     |
//+------------------------------------------------------------------+
bool PlaceOrder(int direction,double volume)
  {
   MqlTradeRequest req;
   MqlTradeResult  res;
   ZeroMemory(req);ZeroMemory(res);
   req.action   = TRADE_ACTION_DEAL;
   req.symbol   = _Symbol;
   req.volume   = volume;
   req.type     = (direction>0)?ORDER_TYPE_BUY:ORDER_TYPE_SELL;
  req.price    = (direction>0)?SymbolInfoDouble(_Symbol,SYMBOL_ASK):SymbolInfoDouble(_Symbol,SYMBOL_BID);
  req.deviation=10;
  req.magic    = MagicNumber;
   double atr[1];
   if(CopyBuffer(handleATR,0,0,1,atr)==1)
     {
      double sl,tp;
      if(direction>0)
        {
         sl=req.price-atr[0]*1.5;
         tp=req.price+atr[0];
        }
      else
        {
         sl=req.price+atr[0]*1.5;
         tp=req.price-atr[0];
        }
      req.sl=NormalizeDouble(sl,_Digits);
      req.tp=NormalizeDouble(tp,_Digits);
     }
  req.type_filling=ORDER_FILLING_IOC;
  req.type_time   = ORDER_TIME_GTC;
   if(!OrderSend(req,res))
     {
      PrintFormat("下單失敗:%d %s",res.retcode,res.comment);
      return false;
     }
   if(res.retcode!=10009 && res.retcode!=10008) // REQUEST_DONE or PLACED
     {
      PrintFormat("下單被拒:%d %s",res.retcode,res.comment);
      return false;
     }
   PrintFormat("下單成功, ticket=%I64d",res.order);
   return true;
  }
//+------------------------------------------------------------------+
//| 平掉所有符合 Magic 的持倉                                        |
//+------------------------------------------------------------------+
void CloseAllPositions()
  {
   for(int i=PositionsTotal()-1;i>=0;i--)
     {
      ulong ticket=PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         if(PositionGetInteger(POSITION_MAGIC)!=MagicNumber) continue;
         long type=PositionGetInteger(POSITION_TYPE);
         double volume=PositionGetDouble(POSITION_VOLUME);
         double price=(type==POSITION_TYPE_BUY)?SymbolInfoDouble(_Symbol,SYMBOL_BID):SymbolInfoDouble(_Symbol,SYMBOL_ASK);
         MqlTradeRequest req;MqlTradeResult res;ZeroMemory(req);ZeroMemory(res);
         req.action   = TRADE_ACTION_DEAL;
         req.position = ticket;
         req.symbol   = _Symbol;
         req.volume   = volume;
         req.type     = (type==POSITION_TYPE_BUY)?ORDER_TYPE_SELL:ORDER_TYPE_BUY;
         req.price    = price;
         req.deviation=10;
         req.magic    = MagicNumber;
         req.type_filling=ORDER_FILLING_IOC;
         req.type_time   = ORDER_TIME_GTC;
         OrderSend(req,res);
        }
     }
  }

//+------------------------------------------------------------------+
//| 移動止損更新                                                     |
//+------------------------------------------------------------------+
void UpdateTrailing()
  {
   double atr[1];
   if(CopyBuffer(handleATR,0,0,1,atr)<1) return;
   double atrv=atr[0];
   for(int i=PositionsTotal()-1;i>=0;i--)
     {
      ulong ticket=PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         if(PositionGetInteger(POSITION_MAGIC)!=MagicNumber) continue;
         long type=PositionGetInteger(POSITION_TYPE);
         double price=(type==POSITION_TYPE_BUY)?SymbolInfoDouble(_Symbol,SYMBOL_BID):SymbolInfoDouble(_Symbol,SYMBOL_ASK);
         double newSL=(type==POSITION_TYPE_BUY)?price-atrv:price+atrv;
         double oldSL=PositionGetDouble(POSITION_SL);
         if((type==POSITION_TYPE_BUY && newSL>oldSL) ||
            (type==POSITION_TYPE_SELL && newSL<oldSL))
           {
            MqlTradeRequest req;MqlTradeResult res;ZeroMemory(req);ZeroMemory(res);
            req.action   = TRADE_ACTION_SLTP;
            req.position = ticket;
            req.sl       = NormalizeDouble(newSL,_Digits);
            req.tp       = PositionGetDouble(POSITION_TP);
            req.symbol   = _Symbol;
            req.magic    = MagicNumber;
            OrderSend(req,res);
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| 檢查是否已有符合 Magic 的持倉                                    |
//+------------------------------------------------------------------+
bool HasOpenPosition()
  {
   for(int i=PositionsTotal()-1;i>=0;i--)
     {
      ulong ticket=PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         if(PositionGetInteger(POSITION_MAGIC)==MagicNumber)
            return true;
        }
     }
   return false;
  }
//+------------------------------------------------------------------+
//| 統計符合 Magic 的持倉數量                                        |
//+------------------------------------------------------------------+
int OpenPositionCount()
  {
   int c=0;
   for(int i=PositionsTotal()-1;i>=0;i--)
     {
      ulong ticket=PositionGetTicket(i);
      if(PositionSelectByTicket(ticket))
        {
         if(PositionGetInteger(POSITION_MAGIC)==MagicNumber)
            c++;
        }
     }
   return c;
  }
//+------------------------------------------------------------------+
